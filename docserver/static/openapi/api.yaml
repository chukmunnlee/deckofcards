openapi: 3.1.0
info:
  title: DeckofCards 
  summary: Play card games virtually
  version: "0.1-alpha"

tags:
- name: Decks
  description: Card deck operations
- name: Games
  description: Games in progress operations

servers:
- url: http://localhost:{port}/{prefix}
  description: Development server
  variables:
    port:
      default: '3000'
    prefix:
      default: 'api'

paths:
  ## Decks
  /decks:
    get:
      summary: List of decks on the server
      operationId: getDecks
      tags:
      - Decks
      responses:
        200:
          description: List of decks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: ulid
                    name: 
                      type: string
                    description:
                      type: string
                    image:
                      type: string
                      format: uri
                  required: [ id, name, description, image ]

  /deck/{deckId}/presets:
    get:
      summary: Get preset configuration for a deck
      operationId: getDeckPresetsByDeckId
      tags:
      - Decks
      parameters:
      - name: deckId
        in: path
        required: true
        schema:
          type: string
          format: ulid
      responses:
        200:
          description: Deck preset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeckPresets'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /deck/{deckId}/back:
    get:
      summary: Get the deck's back image
      operationId: getDeckBackImage
      tags:
      - Decks
      parameters:
      - name: deckId
        in: path
        required: true
        schema:
          type: string
          format: ulid
      responses:
        200:
          description: Deck image
          content:
            application/json:
              schema:
                type: object
                properties:
                  backImage:
                    type: string
                    format: uri
                required: [ backImage ]
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /deck/{deckId}/codes:
    get:
      summary: Get the deck's card codes
      operationId: getDeckCodesById
      tags:
      - Decks
      parameters:
      - name: deckId
        in: path
        required: true
        schema:
          type: string
          format: ulid
      responses:
        200:
          description: Deck code
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /deck/{deckId}/card/{code}:
    get:
      summary: Get a card from the deck by code
      operationId: getDeckCardByCode
      tags:
      - Decks
      parameters:
      - name: deckId
        in: path
        required: true
        schema:
          type: string
          format: ulid
      - name: code
        in: path
        required: true
        schema:
          type: string
          format: ulid
      responses:
        200:
          description: Deck code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /deck/{deckId}:
    get:
      summary: Get deck details by the deck id
      operationId: getDeckById
      tags:
      - Decks 
      parameters:
      - name: deckId
        in: path
        required: true
        schema:
          type: string
          format: ulid
      responses:
        200:
          description: Deck see model/deck.ts
          content:
            application/json:
              schema:
                AnyValue: {}
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

    post:
      summary: Create a game given by the deck id
      operationId: createGameByDeckId
      tags:
      - Decks
      - Games
      parameters:
      - name: deckId
        in: path
        required: true
        schema:
          type: string
          format: ulid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeckPresets'
      responses:
        201:
          description: Game details
          content:
            application/json:
              schema:
                type: object
                properties:
                  gameId:
                    type: string
                required: [ gameId ]
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
                 
  ## Games
  /games:
    get:
      summary: Get a list of running games
      operationId: getGames
      tags:
      - Games
      responses:
        200:
          description: Deck see model/deck.ts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gameId:
                      type: string
                    deckId:
                      type: string
                      format: ulid
                    createdOn:
                      type: number
                    lastUpdate:
                      type: number
                  required: [ gameId, deckId, createdOn, lastUpdate ]

  /game/{gameId}:
    get:
      summary: Get game status by gameId
      operationId: getGameStatus
      tags:
      - Games
      parameters:
      - name: gameId
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: Game status
          content:
            application/json:
              schema:
                type: object
                properties:
                  gameId:
                    type: string
                  deckId:
                    type: string
                    format: ulid
                  createdOn:
                    type: number
                  lastUpdate:
                    type: number
                  piles:
                    type: object
                    additionalProperties:
                      type: number
                required: [ gameId, deckId, createdOn, lastUpdate, piles ]
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    post:
      summary: Recreate the game from the deck
      operationId: restartGame
      tags:
      - Games
      parameters:
      - name: gameId
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: Game id
          content:
            application/json:
              schema:
                type: object
                properties:
                  gameId:
                    type: string
                required: [ gameId ]
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    delete:
      summary: Delete the game
      operationId: deleteGame
      tags:
      - Games
      parameters:
      - name: gameId
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: Game id
          content:
            application/json: {}
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /game/{gameId}/pile:
    get: 
      summary: Get cards from pile_0 pile
      operationId: getCardsFromPile
      tags:
      - Games
      parameters:
      - name: gameId
        in: path
        required: true
        schema:
          type: string
      - name: count
        in: query
        schema:
          type: integer
          default: 1
      - name: drawFrom
        in: query
        schema:
          type: string
          enum:
          - top
          - bottom
          default: top
      responses:
        200:
          description: List of cards from the pile
          content:
            application/json: 
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /game/{gameId}/pile/{pileName}:
    get: 
      summary: Get cards from the pile
      operationId: getCardsFromPile
      tags:
      - Games
      parameters:
      - name: gameId
        in: path
        required: true
        schema:
          type: string
      - name: pileName
        in: path
        required: true
        schema:
          type: string
      - name: count
        in: query
        schema:
          type: integer
          default: 1
      - name: drawFrom
        in: query
        schema:
          type: string
          enum:
          - top
          - bottom
          default: top
      responses:
        200:
          description: List of cards from the pile
          content:
            application/json: 
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

components:
  schemas:
    DeckPresets:
      type: object
      properties:
        count:
          type: integer
          default: 1
        split:
          type: integer
          default: 1
        shuffle:
          type: boolean
          default: true
        combine:
          type: boolean
          default: true
        replacement:
          type: boolean
          default: false
        select:
          type: array
          items:
            type: string

    Card:
      type: object
      properties:
        code:
          type: string
        image:
          type: string
          format: uri
        images:
          type: object
          schema:
            AnyValue: {}
        value: 
          type: string
        suit:
          type: string
        count:
          type: integer
      required: [ code, imge, value, suit, count ]

    NotFound:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string

